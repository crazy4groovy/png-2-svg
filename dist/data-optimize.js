"use strict";const simplifyjs=require("simplify-js"),bezierSmooth=require("./bezier-smooth");function optimizeLineCmd(e,{tolerance:t,smooth:r}){const s=e.match(/-?\d+ */g),n=s.reduce((e,t,r)=>(r%2==1&&e.push([Number(s[r-1]),Number(s[r])]),e),[]).map(([e,t])=>({x:e,y:t})),o=simplifyjs(n,Math.min(t,5),!0);if(r){const e=o.map(({x:e,y:t})=>[e,t]);return bezierSmooth(e,r)}return o.reduce((e,{x:t,y:r})=>{return e+(1===e.length||t<0?"":" ")+t+(r<0?"":" ")+r},"l")}module.exports=function(e,{tolerance:t=.01,smooth:r}){const s=e.match(/d="([^"]+)"/g),n=s.map(e=>e.substring(3,e.length-1)).map(e=>e.match(/[a-z][^a-z]*/gi)).map(e=>e.map(e=>{const t=e[0];return"h"===t?`l${e.substr(1)} 0`:"v"===t?`l0 ${e.substr(1)}`:e}));let o="";return n.map(e=>e.reduce((e,s)=>{const n=s[0];if("l"!==n&&o.length>0){e+=optimizeLineCmd(o,{tolerance:t,smooth:r}),o=""}if("l"===n){const e="-"===n[0]||1===o.length?"":" ";o+=e+s.substr(1)}else e+=s;return e},"")).reduce((e,t,r)=>e.replace(new RegExp(s[r]),`d="${t}"`),e)};
