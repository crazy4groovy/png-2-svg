"use strict";const simplifyjs=require("simplify-js"),bezierSmooth=require("./bezier-smooth");function optimizeLineCmd(e,{tolerance:t,smooth:r,smoothDecimalPlaces:s}){const o=e.match(/-?\d+ */g),i=o.reduce((e,t,r)=>(r%2==1&&e.push([Number(o[r-1]),Number(o[r])]),e),[]).map(([e,t])=>({x:e,y:t})),m=simplifyjs(i,Math.min(t,3),!0);if(r){const e=m.map(({x:e,y:t})=>[e,t]);return bezierSmooth(e,{smooth:r,smoothDecimalPlaces:s})}return m.reduce((e,{x:t,y:r})=>{return e+(1===e.length||t<0?"":" ")+t+(r<0?"":" ")+r},"l")}module.exports=function(e,{tolerance:t=.2,combineLines:r=!1,smooth:s,smoothDecimalPlaces:o}){const i=e.match(/d="([^"]+)"/g),m=i.map(e=>e.substring(3,e.length-1)).map(e=>e.match(/[a-z][^a-z]*/gi)).map(e=>e.map(e=>{if(!r)return e;const t=e[0];if("h"===t)return`l${e.substr(1)} 0`;if("v"===t)return`l0 ${e.substr(1)}`;if("q"===t){const[t,r]=e.substr(1).replace(/-/g," -").trim().split(" ").slice(2);return`l${t} ${r}`}return e}));let c="";return m.map(e=>e.reduce((e,r)=>{const i=r[0];if("l"!==i&&c.length>0){e+=optimizeLineCmd(c,{tolerance:t,smooth:s,smoothDecimalPlaces:o}),c=""}return"l"===i?c+=" "+r.substr(1):e+=r,e},"").replace(/ (\D)/g,"$1").replace(/ +-/g,"-")).reduce((e,t,r)=>e.replace(i[r],`d="${t}"`),e)};
