#!/usr/bin/env node
"use strict";var validateArgs={colors:Number,scale:Number,writeFileWithTag:String};const fs=require("fs");var dir=new function(){this.scan=async function(r,t){if(""===r||"/"===r)return console.error("Error: directory to scan cannot be empty."),console.error('If you want to scan your script location, please use "dir2array.Scan(__dirname);"'),null;if("/"!==r.slice(-1)&&(r+="/"),!this.dirExists(r))return;const s=async r=>fs.readdirSync(r).sort().reduce(async(i,n)=>{await i;const e=r+n;return this.dirExists(e)?s(e+"/"):t(e)},Promise.resolve());return s(r)},this.dirExists=function(r){try{return fs.lstatSync(r).isDirectory()}catch(r){return!1}},this.fileExists=function(r){try{return fs.existsSync(r)}catch(r){return!1}}};const fs$1=require("fs"),toSvg=require(".");function formatOutput(r,t){let s=[];return t&&s.push("FILENAME="+t+":"),s.push(r),t&&s.push("[EOF]"),s=s.join("\n")}async function main(){const r=process.argv.slice(2),[t,...s]=r;t||console.log("run: svg-thumbnailer {image-path} {options?}");const i=s.reduce((r,t)=>{const[s,i]=t.replace(/^--?/,"").split("=");return validateArgs[s]&&(r[s]=validateArgs[s](i)),r},{}),{writeFileWithTag:n}=i,e=async(r,t)=>{if(!t&&!r.match(/\.(jpe?g|png)$/i))return;const{data:s}=await toSvg(r,i).catch(console.log),e=formatOutput(s,n?void 0:r);n?fs$1.writeFileSync(`${r}.${n}`,e,"utf-8"):console.log(e)};dir.dirExists(t)?await dir.scan(t,e):e(t,!0)}main();
